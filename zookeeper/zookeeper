#!/bin/bash

set -e

USER=`whoami`
HOST=`hostname -s`
DOMAIN=`hostname -d`

SERVERS=1
CONF_DIR="/usr/local/zookeeper/conf"
DATA_DIR="/data/zookeeper/data"
DATA_LOG_DIR="/data/zookeeper/log"
LOG_DIR="/var/log/zookeeper"
SERVER_PORT=2888
CLIENT_PORT=2181
LEADER_ELECTION_PORT=3888
INIT_LIMIT=10
TICK_TIME=2000
SYNC_LIMIT=5
HEAP=1G
MAX_CLIENT_CNXNS=100
SNAP_RETAIN_COUNT=3
PURGE_INTERVAL=0
LEADER_SERVES="yes"
LOG_LEVEL="INFO"

function create_config() {
    rm -f $CONFIG_FILE

    echo "# The number of milliseconds of each tick" >> $CONFIG_FILE
    echo "tickTime=$TICK_TIME" >> $CONFIG_FILE

    echo "# The number of ticks that the initial " >>$CONFIG_FILE
    echo "# synchronization phase can take" >> $CONFIG_FILE
    echo "initLimit=$INIT_LIMIT" >> $CONFIG_FILE

    echo "# The number of ticks that can pass between " >> $CONFIG_FILE
    echo "# sending a request and getting an acknowledgement" >> $CONFIG_FILE
    echo "syncLimit=$SYNC_LIMIT" >> $CONFIG_FILE

    echo "# the directory where the snapshot is stored." >> $CONFIG_FILE
    echo "# do not use /tmp for storage, /tmp here is just" >> $CONFIG_FILE
    echo "# example sakes." >> $CONFIG_FILE
    echo "dataDir=$DATA_DIR" >> $CONFIG_FILE
    echo "dataLogDir=$DATA_LOG_DIR" >> $CONFIG_FILE

    echo "# the port at which the clients will connect" >> $CONFIG_FILE
    echo "clientPort=$CLIENT_PORT" >> $CONFIG_FILE

    echo "# the maximum number of client connections." >> $CONFIG_FILE
    echo "# increase this if you need to handle more clients" >> $CONFIG_FILE
    echo "maxClientCnxns=$MAX_CLIENT_CNXNS" >> $CONFIG_FILE

    echo "#" >> $CONFIG_FILE
    echo "# Be sure to read the maintenance section of the " >> $CONFIG_FILE
    echo "# administrator guide before turning on autopurge." >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# The number of snapshots to retain in dataDir" >> $CONFIG_FILE
    echo "autopurge.snapRetainCount=$SNAP_RETAIN_COUNT" >> $CONFIG_FILE
    echo "# Purge task interval in hours" >> $CONFIG_FILE
    echo "# Set to \"0\" to disable auto purge feature" >> $CONFIG_FILE
    echo "autopurge.purgeInterval=$PURGE_INTERVAL" >> $CONFIG_FILE

    echo "minSessionTimeout=$MIN_SESSION_TIMEOUT" >> $CONFIG_FILE
    echo "maxSessionTimeout=$MAX_SESSION_TIMEOUT" >> $CONFIG_FILE

    echo "" >> $CONFIG_FILE

    echo "leaderServes=$LEADER_SERVES" >> $CONFIG_FILE

    echo "" >> $CONFIG_FILE

    if [ $SERVERS -gt 1 ]; then
        print_servers >> $CONFIG_FILE
    fi

    cat $CONFIG_FILE >&2
}

function create_data_dirs() {
    MYID_FILE="$DATA_DIR/myid"

    if [ ! -d $DATA_DIR  ]; then
        mkdir -p $DATA_DIR
    fi

    if [ ! -d $DATA_LOG_DIR  ]; then
        mkdir -p $DATA_LOG_DIR
    fi

    if [ ! -f $MYID_FILE ] && [ $SERVERS -gt 1 ]; then
        echo $MY_ID >> $MYID_FILE
    fi
}

function print_servers() {
    for (( i=1; i<=$SERVERS; i++ ))
    do
        echo "server.$i=$NAME-$((i-1)).$DOMAIN:$SERVER_PORT:$LEADER_ELECTION_PORT"
    done
}

function create_jvm_props() {
    JAVA_ENV_FILE="$CONF_DIR/java.env"
    rm -f $JAVA_ENV_FILE
    echo "ZOO_LOG_DIR=$LOG_DIR" >> $JAVA_ENV_FILE
    echo "JVMFLAGS=\"-Xmx$HEAP -Xms$HEAP\"" >> $JAVA_ENV_FILE
}

function create_log_props() {
    LOGGER_PROPS_FILE="$CONF_DIR/log4j.properties"

    if [ ! -d $LOG_DIR  ]; then
        mkdir -p $LOG_DIR
    fi

    echo "Creating ZooKeeper log4j configuration"
    echo "zookeeper.root.logger=CONSOLE" >> $LOGGER_PROPS_FILE
    echo "zookeeper.console.threshold="$LOG_LEVEL >> $LOGGER_PROPS_FILE
    echo "log4j.rootLogger=\${zookeeper.root.logger}" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n" >> $LOGGER_PROPS_FILE
}

function start() {
    MIN_SESSION_TIMEOUT=${MIN_SESSION_TIMEOUT:- $((TICK_TIME*2))}
    MAX_SESSION_TIMEOUT=${MAX_SESSION_TIMEOUT:- $((TICK_TIME*20))}
    CONFIG_FILE="$CONF_DIR/zoo.cfg"

    if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
        NAME=${BASH_REMATCH[1]}
        ORD=${BASH_REMATCH[2]}
    else
        echo "Fialed to parse name and ordinal of Pod, hostname is $HOST."
        exit 1
    fi

    MY_ID=$((ORD+1))

    create_config \
    && create_jvm_props \
    && create_log_props \
    && create_data_dirs

    echo "Staring zookeeper."
    exec /usr/local/zookeeper/bin/zkServer.sh start-foreground
}

function healthcheck() {
    PORT="$1"

    RESULT=$(echo ruok | nc 127.0.0.1 $PORT)
    if [ "$RESULT" == "imok" ]; then
        exit 0
    else
        exit 1
    fi
}

function usage() {
    COMMAND="$1"

    ERROR_MSG="$2"
    
    if [ "$ERROR_MSG" != "" ]; then
        echo -e "\nERROR: $ERROR_MSG\n"
    fi

    if [ "$COMMAND" = "start" ]; then
echo "\
Usage: zookeeper start [OPTIONS]
Start a ZooKeeper server based on the supplied options.
    --servers               The number of servers in the ensemble. The default 
                            value is "$SERVERS".

    --conf_dir              The directoyr where the ZooKeeper process will store its
                            configuration. The default is "$CONF_DIR".

    --data_dir              The directory where the ZooKeeper process will store its
                            snapshots. The default is "$DATA_DIR".

    --data_log_dir          The directory where the ZooKeeper process will store its 
                            write ahead log. The default is "$DATA_LOG_DIR".

    --server_port           The port on which the ZooKeeper process will listen for 
                            requests from other servers in the ensemble. The 
                            default is "$SERVER_PORT". 

    --client_port           The port on which the ZooKeeper process will listen for 
                            client requests. The default is "$CLIENT_PORT".

    --leader_election_port  The port on which the ZooKeeper process will perform 
                            leader election. The default is "$LEADER_ELECTION_PORT".

    --init_limit            The number of Ticks that an ensemble member is allowed 
                            to perform leader election. The default is "$INIT_LIMIT".

    --tick_time             The length of a ZooKeeper tick in ms. The default is "$TICK_TIME".

    --sync_limit            The maximum session timeout that the ensemble will 
                            allows a client to request. The default is "$SYNC_LIMIT".

    --max_client_cnxns      The maximum number of client connections that the 
                            ZooKeeper process will accept simultaneously. The 
                            default is "$MAX_CLIENT_CNXNS".

    --snap_retain_count     The maximum number of snapshots the ZooKeeper process 
                            will retain if purge_interval is greater than 0. The 
                            default is "$SNAP_RETAIN_COUNT".

    --purge_interval        The number of hours the ZooKeeper process will wait 
                            between purging its old snapshots. If set to 0 old 
                            snapshots will never be purged. The default is "$PURGE_INTERVAL".

    --max_session_timeout   The maximum time in milliseconds for a client session 
                            timeout. The default value is 2 * tick time.

    --min_session_timeout   The minimum time in milliseconds for a client session 
                            timeout. The default value is 20 * tick time.

    --leader_serves         Leader accepts client connections.
                            The default value is "$LEADER_SERVES".

    --heap                  The maximum amount of heap to use. The format is the 
                            same as that used for the Xmx and Xms parameters to the 
                            JVM. e.g. --heap=2G. The default is "$HEAP".

    --log_dir               The log directory for the zookeeeper server. 
                            The default is "$LOG_LEVEL".

    --log_level             The log level for the zookeeeper server. Either FATAL,
                            ERROR, WARN, INFO, DEBUG. The default is "$LOG_LEVEL".
"
    elif [ "$COMMAND" = "healthcheck" ]; then
echo "\
Usage: zookeeper healthcheck [OPTIONS]
ZooKeeper server healthcheck based on the supplied options.
     --port  The port of server. The default value is "$CLIENT_PORT".
"
    else
        echo "\
Usage: zookeeper COMMAND OPTIONS
       where COMMAND is one of: start, healthcheck

Pass --help after any COMMAND to see command-specific usage information,
     such as:    ./zookeeper start --help or ./zookeeper healthcheck --help
"
fi
}

if [ $# -gt 0 ]; then
    COMMAND="$1"
    shift
else
    usage ""
    exit;
fi

if [ $COMMAND = "start" ]; then
    if [ $# -eq 0 ]; then
        usage "$COMMAND"
        exit
    fi

    optspec=":hv-:"
    while getopts "$optspec" optchar; do
        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    servers=*)
                        SERVERS=${OPTARG##*=}
                        ;;
                    conf_dir=*)
                        CONF_DIR=${OPTARG##*=}
                        ;;
                    data_dir=*)
                        DATA_DIR=${OPTARG##*=}
                        ;;
                    data_log_dir=*)
                        DATA_LOG_DIR=${OPTARG##*=}
                        ;;
                    server_port=*)
                        SERVER_PORT=${OPTARG##*=}
                        ;;
                    client_port=*)
                        CLIENT_PORT=${OPTARG##*=}
                        ;;
                    leader_election_port=*)
                        LEADER_ELECTION_PORT=${OPTARG##*=}
                        ;;
                    init_limit=*)
                        INIT_LIMIT=${OPTARG##*=}
                        ;;
                    tick_time=*)
                        TICK_TIME=${OPTARG##*=}
                        ;;
                    sync_limit=*)
                        SYNC_LIMIT=${OPTARG##*=}
                        ;;
                    max_client_cnxns=*)
                        MAX_CLIENT_CNXNS=${OPTARG##*=}
                        ;;
                    snap_retain_count=*)
                        SNAP_RETAIN_COUNT=${OPTARG##*=}
                        ;;
                    purge_interval=*)
                        PURGE_INTERVAL=${OPTARG##*=}
                        ;;
                    max_session_timeout=*)
                        MAX_SESSION_TIMEOUT=${OPTARG##*=}
                        ;;
                    min_session_timeout=*)
                        MIN_SESSION_TIMEOUT=${OPTARG##*=}
                        ;;
                    leader_serves=*)
                        LEADER_SERVES=${OPTARG##*=}
                        ;;
                    heap=*)
                        HEAP=${OPTARG##*=}
                        ;;
                    log_dir=*)
                        LOG_DIR=${OPTARG##*=}
                        ;;
                    log_level=*)
                        LOG_LEVEL=${OPTARG##*=}
                        ;;
                    help)
                        usage "$COMMAND"
                        exit
                        ;;
                    *)
                        echo "Unknown option ${optchar} : --${OPTARG}" >&2
                        exit 1
                        ;;
                esac;;
            h)
                usage "$COMMAND"
                exit
                ;;
            *)
                if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                    echo "Non-option argument: '-${OPTARG}'" >&2
                fi
                exit;
                ;;
        esac
    done

    start
elif [ $COMMAND = "healthcheck" ]; then
    if [ $# -eq 0 ]; then
        usage "$COMMAND"
        exit
    fi

    optspec=":hv-:"
    while getopts "$optspec" optchar; do
        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    port=*)
                        PORT=${OPTARG##*=}

                        if [[ "$PORT" =~ ^[0-9]+$ ]]; then
                            PORT=$PORT
                        else
                            usage "$COMMAND" "Port number is required when using the $1 option!"
                            exit 1
                        fi
                        ;;
                    help)
                        usage "$COMMAND"
                        exit
                        ;;
                    *)
                        echo "Unknown option ${optchar} : --${OPTARG}" >&2
                        exit 1
                        ;;
                esac;;
            h)
                usage "$COMMAND"
                exit
                ;;
            *)
                if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                    echo "Non-option argument: '-${OPTARG}'" >&2
                fi
                exit;
                ;;
        esac
    done

    healthcheck $PORT
else
    usage "" "$COMMAND is not a valid command!"
    exit 1;
fi