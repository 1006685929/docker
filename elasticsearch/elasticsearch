#!/bin/bash

set -e

USER=`whoami`
HOST=`hostname -s`
DOMAIN=`hostname -d`
IP=`hostname -i`

BASE_DIR="/usr/local/elasticsearch"
CONF_DIR=${BASE_DIR}"/config"
DATA_DIR="/data/elasticsearch"
LOG_DIR="/var/log/elasticsearch"
CLUSTER_NAME="elasticsearch-cluster"
NODE_NAME_PREFIX="elasticsearch-node"
NODE_NAME=${NODE_NAME_PREFIX}"-1"
NETWORK_HOST=${IP}
HTTP_PORT=9200
DISCOVERY_SEED_HOSTS='"127.0.0.1", "[::1]"'
CLUSTER_INITIAL_MASTER_NODES=${NODE_NAME}
GATEWAY_RECOVER_AFTER_NODES=3
ES_TMPDIR=${TMPDIR}
HEAP="2G"

JAVA_VERSION=`java -version 2>&1 | awk 'NR==1{ gsub(/"/,""); print $3 }'`

function run() {
    if [[ "$(id -u)" == "0" ]]; then
        # If running as root, drop to specified UID and run command
        set -- su-exec elasticsearch "$@"
    fi

    exec "$@"
}

function create_config() {
    if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
        NAME=${BASH_REMATCH[1]}
        ORD=${BASH_REMATCH[2]}
    else
        echo "Fialed to parse name and ordinal of Pod, hostname is $HOST."
        exit 1
    fi

    NODE_ID=$((ORD+1))
    NODE_NAME=$NODE_NAME_PREFIX$NODE_ID
    rm -f $CONFIG_FILE

    echo "# ======================== Elasticsearch Configuration =========================" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# NOTE: Elasticsearch comes with reasonable defaults for most settings." >> $CONFIG_FILE
    echo "#       Before you set out to tweak and tune the configuration, make sure you" >> $CONFIG_FILE
    echo "#       understand what are you trying to accomplish and the consequences." >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# The primary way of configuring a node is via this file. This template lists" >> $CONFIG_FILE
    echo "# the most important settings you may want to configure for a production cluster." >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Please consult the documentation for further information on configuration options:" >> $CONFIG_FILE
    echo "# https://www.elastic.co/guide/en/elasticsearch/reference/index.html" >> $CONFIG_FILE

    echo "#" >> $CONFIG_FILE
    echo "# ---------------------------------- Cluster -----------------------------------" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Use a descriptive name for your cluster:" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "cluster.name: $CLUSTER_NAME" >> $CONFIG_FILE

    echo "#" >> $CONFIG_FILE
    echo "# ------------------------------------ Node ------------------------------------" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Use a descriptive name for the node:" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "node.name: $NODE_NAME" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Add custom attributes to the node:" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "node.attr.rack: r1" >> $CONFIG_FILE

    echo "#" >> $CONFIG_FILE
    echo "# ----------------------------------- Paths ------------------------------------" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Path to directory where to store the data (separate multiple locations by comma):" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "path.data: $DATA_DIR" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Path to log files:" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "path.logs: $LOG_DIR" >> $CONFIG_FILE

    echo "#" >> $CONFIG_FILE
    echo "# ----------------------------------- Memory -----------------------------------" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Lock the memory on startup:" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "bootstrap.memory_lock: true" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Make sure that the heap size is set to about half the memory available" >> $CONFIG_FILE
    echo "# on the system and that the owner of the process is allowed to use this" >> $CONFIG_FILE
    echo "# limit." >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Elasticsearch performs poorly when the system is swapping the memory." >> $CONFIG_FILE

    echo "#" >> $CONFIG_FILE
    echo "# ---------------------------------- Network -----------------------------------" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Set the bind address to a specific IP (IPv4 or IPv6):" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "network.host: $NETWORK_HOST" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Set a custom port for HTTP:" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "http.port: $HTTP_PORT" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# For more information, consult the network module documentation." >> $CONFIG_FILE

    echo "#" >> $CONFIG_FILE
    echo "# --------------------------------- Discovery ----------------------------------" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Pass an initial list of hosts to perform discovery when this node is started:" >> $CONFIG_FILE
    echo "# The default list of hosts is [\"127.0.0.1\", \"[::1]\"]" >> $CONFIG_FILE
    echo "discovery.seed_hosts: [$DISCOVERY_SEED_HOSTS]" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Bootstrap the cluster using an initial set of master-eligible nodes:" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "cluster.initial_master_nodes: [$CLUSTER_INITIAL_MASTER_NODES]" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# For more information, consult the discovery and cluster formation module documentation." >> $CONFIG_FILE
    
    echo "#" >> $CONFIG_FILE
    echo "# ---------------------------------- Gateway -----------------------------------" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Block initial recovery after a full cluster restart until N nodes are started:" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "gateway.recover_after_nodes: $GATEWAY_RECOVER_AFTER_NODES" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# For more information, consult the gateway module documentation." >> $CONFIG_FILE

    echo "#" >> $CONFIG_FILE
    echo "# ---------------------------------- Various -----------------------------------" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "# Require explicit names when deleting indices:" >> $CONFIG_FILE
    echo "#" >> $CONFIG_FILE
    echo "action.destructive_requires_name: true" >> $CONFIG_FILE

    chown elasticsearch:elasticsearch $CONFIG_FILE

    cat $CONFIG_FILE >&2
}

function create_data_dirs() {
    if [ ! -d $DATA_DIR  ]; then
        mkdir -p $DATA_DIR
    fi

    chown elasticsearch:elasticsearch $DATA_DIR
}

function create_jvm_props() {
    JAVA_ENV_FILE="$CONF_DIR/jvm.options"

    rm -fR $JAVA_ENV_FILE

    if [ "x$ES_TMPDIR" = "x" ]; then
        ES_TMPDIR="/tmp"
    fi

    echo "## JVM configuration" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "################################################################" >> $JAVA_ENV_FILE
    echo "## IMPORTANT: JVM heap size" >> $JAVA_ENV_FILE
    echo "################################################################" >> $JAVA_ENV_FILE
    echo "##" >> $JAVA_ENV_FILE
    echo "## You should always set the min and max JVM heap" >> $JAVA_ENV_FILE
    echo "## size to the same value. For example, to set" >> $JAVA_ENV_FILE
    echo "## the heap to 4 GB, set:" >> $JAVA_ENV_FILE
    echo "##" >> $JAVA_ENV_FILE
    echo "## -Xms4g" >> $JAVA_ENV_FILE
    echo "## -Xmx4g" >> $JAVA_ENV_FILE
    echo "##" >> $JAVA_ENV_FILE
    echo "## See https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html" >> $JAVA_ENV_FILE
    echo "## for more information" >> $JAVA_ENV_FILE
    echo "##" >> $JAVA_ENV_FILE
    echo "################################################################" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "# Xms represents the initial size of total heap space" >> $JAVA_ENV_FILE
    echo "# Xmx represents the maximum size of total heap space" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE
    echo "-Xms$HEAP" >> $JAVA_ENV_FILE
    echo "-Xmx$HEAP" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "################################################################" >> $JAVA_ENV_FILE
    echo "## Expert settings" >> $JAVA_ENV_FILE
    echo "################################################################" >> $JAVA_ENV_FILE
    echo "##" >> $JAVA_ENV_FILE
    echo "## All settings below this section are considered" >> $JAVA_ENV_FILE
    echo "## expert settings. Don't tamper with them unless" >> $JAVA_ENV_FILE
    echo "## you understand what you are doing" >> $JAVA_ENV_FILE
    echo "##" >> $JAVA_ENV_FILE
    echo "################################################################" >> $JAVA_ENV_FILE

    echo "## GC configuration" >> $JAVA_ENV_FILE
    echo "-XX:+UseConcMarkSweepGC" >> $JAVA_ENV_FILE
    echo "-XX:CMSInitiatingOccupancyFraction=75" >> $JAVA_ENV_FILE
    echo "-XX:+UseCMSInitiatingOccupancyOnly" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    if [[ "$JAVA_VERSION" =~ ^10.* ]]; then
        echo "## G1GC Configuration" >> $JAVA_ENV_FILE
        echo "# NOTE: G1GC is only supported on JDK version 10 or later." >> $JAVA_ENV_FILE
        echo "# To use G1GC uncomment the lines below." >> $JAVA_ENV_FILE
        echo "10-:-XX:-UseConcMarkSweepGC" >> $JAVA_ENV_FILE
        echo "10-:-XX:-UseCMSInitiatingOccupancyOnly" >> $JAVA_ENV_FILE
        echo "10-:-XX:+UseG1GC" >> $JAVA_ENV_FILE
        echo "10-:-XX:InitiatingHeapOccupancyPercent=75" >> $JAVA_ENV_FILE
        echo "" >> $JAVA_ENV_FILE
    fi

    echo "## DNS cache policy" >> $JAVA_ENV_FILE
    echo "# cache ttl in seconds for positive DNS lookups noting that this overrides the" >> $JAVA_ENV_FILE
    echo "# JDK security property networkaddress.cache.ttl; set to -1 to cache forever" >> $JAVA_ENV_FILE
    echo "-Des.networkaddress.cache.ttl=60" >> $JAVA_ENV_FILE
    echo "# cache ttl in seconds for negative DNS lookups noting that this overrides the" >> $JAVA_ENV_FILE
    echo "# JDK security property networkaddress.cache.negative ttl; set to -1 to cache" >> $JAVA_ENV_FILE
    echo "# forever" >> $JAVA_ENV_FILE
    echo "-Des.networkaddress.cache.negative.ttl=10" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "## optimizations" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "# pre-touch memory pages used by the JVM during initialization" >> $JAVA_ENV_FILE
    echo "-XX:+AlwaysPreTouch" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "## basic" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "# explicitly set the stack size" >> $JAVA_ENV_FILE
    echo "-Xss1m" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "# set to headless, just in case" >> $JAVA_ENV_FILE
    echo "-Djava.awt.headless=true" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "# ensure UTF-8 encoding by default (e.g. filenames)" >> $JAVA_ENV_FILE
    echo "-Dfile.encoding=UTF-8" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "# use our provided JNA always versus the system one" >> $JAVA_ENV_FILE
    echo "-Djna.nosys=true" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "# turn off a JDK optimization that throws away stack traces for common" >> $JAVA_ENV_FILE
    echo "# exceptions because stack traces are important for debugging" >> $JAVA_ENV_FILE
    echo "-XX:-OmitStackTraceInFastThrow" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "# flags to configure Netty" >> $JAVA_ENV_FILE
    echo "-Dio.netty.noUnsafe=true" >> $JAVA_ENV_FILE
    echo "-Dio.netty.noKeySetOptimization=true" >> $JAVA_ENV_FILE
    echo "-Dio.netty.recycler.maxCapacityPerThread=0" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "# log4j 2" >> $JAVA_ENV_FILE
    echo "-Dlog4j.shutdownHookEnabled=false" >> $JAVA_ENV_FILE
    echo "-Dlog4j2.disable.jmx=true" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "-Djava.io.tmpdir=$ES_TMPDIR" >> $JAVA_ENV_FILE
    echo "-Djna.tmpdir=$ES_TMPDIR" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "## heap dumps" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "# generate a heap dump when an allocation from the Java heap fails" >> $JAVA_ENV_FILE
    echo "# heap dumps are created in the working directory of the JVM" >> $JAVA_ENV_FILE
    echo "-XX:+HeapDumpOnOutOfMemoryError" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "# specify an alternative path for heap dumps; ensure the directory exists and" >> $JAVA_ENV_FILE
    echo "# has sufficient space" >> $JAVA_ENV_FILE
    echo "-XX:HeapDumpPath=data" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    echo "# specify an alternative path for JVM fatal error logs" >> $JAVA_ENV_FILE
    echo "-XX:ErrorFile=$LOG_DIR/hs_err_pid%p.log" >> $JAVA_ENV_FILE
    echo "" >> $JAVA_ENV_FILE

    if [[ "$JAVA_VERSION" =~ ^1.8.* ]]; then
        echo "## JDK 8 GC logging" >> $JAVA_ENV_FILE
        echo "" >> $JAVA_ENV_FILE
        echo "8:-XX:+PrintGCDetails" >> $JAVA_ENV_FILE
        echo "8:-XX:+PrintGCDateStamps" >> $JAVA_ENV_FILE
        echo "8:-XX:+PrintTenuringDistribution" >> $JAVA_ENV_FILE
        echo "8:-XX:+PrintGCApplicationStoppedTime" >> $JAVA_ENV_FILE
        echo "8:-Xloggc:$LOG_DIR/gc.log" >> $JAVA_ENV_FILE
        echo "8:-XX:+UseGCLogFileRotation" >> $JAVA_ENV_FILE
        echo "8:-XX:NumberOfGCLogFiles=32" >> $JAVA_ENV_FILE
        echo "8:-XX:GCLogFileSize=64m" >> $JAVA_ENV_FILE
    fi

    if [[ "$JAVA_VERSION" =~ ^1.9.* ]]; then
        echo "# JDK 9+ GC logging" >> $JAVA_ENV_FILE
        echo "9-:-Xlog:gc*,gc+age=trace,safepoint:file=$LOG_DIR/gc.log:utctime,pid,tags:filecount=32,filesize=64m" >> $JAVA_ENV_FILE
        echo "# due to internationalization enhancements in JDK 9 Elasticsearch need to set the provider to COMPAT otherwise" >> $JAVA_ENV_FILE
        echo "# time/date parsing will break in an incompatible way for some date patterns and locals" >> $JAVA_ENV_FILE
        echo "9-:-Djava.locale.providers=COMPAT" >> $JAVA_ENV_FILE
    fi

    chown elasticsearch:elasticsearch $JAVA_ENV_FILE
}

function create_log_props() {
    if [ ! -d $LOG_DIR  ]; then
        mkdir -p $LOG_DIR
    fi

    chown elasticsearch:elasticsearch $LOG_DIR
}

function start() {
    CONFIG_FILE="$CONF_DIR/elasticsearch.yml"

    if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
        NAME=${BASH_REMATCH[1]}
        ORD=${BASH_REMATCH[2]}
    else
        echo "Fialed to parse name and ordinal of Pod, hostname is $HOST."
        exit 1
    fi

    sysctl -w vm.swappiness=0
    sysctl -w vm.max_map_count=655350
    sysctl -p

    ulimit -l unlimited
    ulimit -m unlimited

    create_config \
    && create_jvm_props \
    && create_log_props \
    && create_data_dirs \

    echo "Staring elasticsearch."
    run $BASE_DIR/bin/elasticsearch
}

function healthcheck() {
    PORT="$1"

    RESULT=$(echo ruok | nc 127.0.0.1 $PORT)
    if [ "$RESULT" == "imok" ]; then
        exit 0
    else
        exit 1
    fi
}

function usage() {
    COMMAND="$1"

    ERROR_MSG="$2"
    
    if [ "$ERROR_MSG" != "" ]; then
        echo -e "\nERROR: $ERROR_MSG\n"
    fi

    if [ "$COMMAND" = "start" ]; then
echo "\
Usage: elasticsearch start [OPTIONS]
Start a Elasticsearch server based on the supplied options.
    --cluster_name                  Use a descriptive name for cluster. The default 
                                    value is "$CLUSTER_NAME".

    --node_name_prefix              Use a descriptive the prefix of name for the node.
                                    The default is "$NODE_NAME_PREFIX".

    --network_host                  Set the bind address to a specific IP (IPv4 or IPv6).
                                    The default is "$IP". 

    --http_port                     Set a custom port for HTTP. The default is "$HTTP_PORT". 

    --data_dir                      Path to directory where to store the data.
                                    The default is "$DATA_DIR".

    --discovery_seed_hosts          Pass an initial list of hosts to perform discovery 
                                    when this node is started. The default is "$DISCOVERY_SEED_HOSTS".

    --cluster_initial_master_nodes  Bootstrap the cluster using an initial set of master-eligible nodes.
                                    The default is "$CLUSTER_INITIAL_MASTER_NODES".

    --gateway_recover_after_nodes   Block initial recovery after a full cluster restart until N nodes are started. The default is "$GATEWAY_RECOVER_AFTER_NODES".

    --heap                          The maximum amount of heap to use. The format is the 
                                    same as that used for the Xmx and Xms parameters to the 
                                    JVM. e.g. --heap=2G. The default is "$HEAP".

    --log_dir                       The log directory for the elasticsearch server. 
                                    The default is "$LOG_DIR".
"
    elif [ "$COMMAND" = "healthcheck" ]; then
echo "\
Usage: elasticsearch healthcheck [OPTIONS]
Elasticsearch server healthcheck based on the supplied options.
     --port  The port of server. The default value is "$CLIENT_PORT".
"
    else
        echo "\
Usage: elasticsearch COMMAND OPTIONS
       where COMMAND is one of: start, healthcheck

Pass --help after any COMMAND to see command-specific usage information,
     such as:    ./elasticsearch start --help or ./elasticsearch healthcheck --help
"
fi
}

if [ $# -gt 0 ]; then
    COMMAND="$1"
    shift
else
    usage ""
    exit;
fi

if [ $COMMAND = "start" ]; then
    if [ $# -eq 0 ]; then
        usage "$COMMAND"
        exit
    fi

    optspec=":hv-:"
    while getopts "$optspec" optchar; do
        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    cluster_name=*)
                        CLUSTER_NAME=${OPTARG##*=}
                        ;;
                    node_name_prefix=*)
                        NODE_NAME_PREFIX=${OPTARG##*=}
                        ;;
                    network_host=*)
                        NETWORK_HOST=${OPTARG##*=}
                        ;;
                    http_port=*)
                        HTTP_PORT=${OPTARG##*=}

                        if [[ "$HTTP_PORT" =~ ^[0-9]+$ ]]; then
                            HTTP_PORT=$HTTP_PORT
                        else
                            usage "$COMMAND" "Http port number is required when using the $1 option!"
                            exit 1
                        fi
                        ;;
                    data_dir=*)
                        DATA_DIR=${OPTARG##*=}
                        ;;
                    discovery_seed_hosts=*)
                        DISCOVERY_SEED_HOSTS=${OPTARG##*=}
                        ;;
                    cluster_initial_master_nodes=*)
                        CLUSTER_INITIAL_MASTER_NODES=${OPTARG##*=}
                        ;;
                    gateway_recover_after_nodes=*)
                        GATEWAY_RECOVER_AFTER_NODES=${OPTARG##*=}

                        if [[ "$GATEWAY_RECOVER_AFTER_NODES" =~ ^[0-9]+$ ]]; then
                            GATEWAY_RECOVER_AFTER_NODES=$GATEWAY_RECOVER_AFTER_NODES
                        else
                            usage "$COMMAND" "Gateway recover after nodes number is required when using the $1 option!"
                            exit 1
                        fi
                        ;;
                    heap=*)
                        HEAP=${OPTARG##*=}
                        ;;
                    log_dir=*)
                        LOG_DIR=${OPTARG##*=}
                        ;;
                    help)
                        usage "$COMMAND"
                        exit
                        ;;
                    *)
                        echo "Unknown option ${optchar} : --${OPTARG}" >&2
                        exit 1
                        ;;
                esac;;
            h)
                usage "$COMMAND"
                exit
                ;;
            *)
                if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                    echo "Non-option argument: '-${OPTARG}'" >&2
                fi
                exit;
                ;;
        esac
    done

    start
elif [ $COMMAND = "healthcheck" ]; then
    if [ $# -eq 0 ]; then
        usage "$COMMAND"
        exit
    fi

    optspec=":hv-:"
    while getopts "$optspec" optchar; do
        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    port=*)
                        PORT=${OPTARG##*=}

                        if [[ "$PORT" =~ ^[0-9]+$ ]]; then
                            PORT=$PORT
                        else
                            usage "$COMMAND" "Port number is required when using the $1 option!"
                            exit 1
                        fi
                        ;;
                    help)
                        usage "$COMMAND"
                        exit
                        ;;
                    *)
                        echo "Unknown option ${optchar} : --${OPTARG}" >&2
                        exit 1
                        ;;
                esac;;
            h)
                usage "$COMMAND"
                exit
                ;;
            *)
                if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                    echo "Non-option argument: '-${OPTARG}'" >&2
                fi
                exit;
                ;;
        esac
    done

    healthcheck $PORT
else
    usage "" "$COMMAND is not a valid command!"
    exit 1;
fi